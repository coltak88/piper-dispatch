name: Deploy Piper Dispatch Special Kit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: piperdispatch-specialkit
  REGION: us-central1

jobs:
  security-audit:
    name: Security & Privacy Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level high
          npx snyk test --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Privacy compliance check
        run: |
          echo "Checking for data retention violations..."
          ! grep -r "localStorage\|sessionStorage\|document.cookie" src/ || exit 1
          echo "Verifying GDPR-Plus compliance..."
          node scripts/gdpr-compliance-check.js
          echo "Privacy audit passed"

      - name: Verify quantum-resistant encryption
        run: |
          echo "Checking quantum security implementation..."
          node scripts/verify-quantum-encryption.js

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Accessibility tests
        run: |
          npm run build
          npm start &
          sleep 10
          npx axe-cli http://localhost:3000
          pkill -f "npm start"

      - name: Neurodiversity component tests
        run: |
          echo "Testing ADHD-friendly components..."
          node scripts/test-adhd-components.js
          echo "Testing dyslexia-optimized templates..."
          node scripts/test-dyslexia-templates.js
          echo "Testing ASD-structured workflows..."
          node scripts/test-asd-workflows.js

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-audit, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files
          path: |
            .next/
            public/
            package.json
            package-lock.json

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: [security-audit, test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-files

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $SERVICE_NAME \
            --source . \
            --platform managed \
            --region $REGION \
            --allow-unauthenticated \
            --memory 512Mi \
            --cpu 1 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production,PRIVACY_MODE=strict \
            --set-env-vars DATA_PURGE_INTERVAL=15 \
            --set-env-vars QUANTUM_ENCRYPTION=enabled

      - name: Health check
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "Service URL: $SERVICE_URL"
          curl -f $SERVICE_URL/health || exit 1
          echo "Health check passed"

      - name: Verify privacy compliance post-deployment
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
          echo "Verifying 15-second data purge..."
          curl -f $SERVICE_URL/privacy/verify-purge || exit 1
          echo "Verifying GDPR-Plus compliance..."
          curl -f $SERVICE_URL/privacy/gdpr-status || exit 1
          echo "Post-deployment privacy verification passed"

  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "‚úÖ Piper Dispatch Special Kit deployed successfully"
            echo "üîí Privacy-first architecture verified"
            echo "‚ôø Neurodiversity optimization confirmed"
            echo "üõ°Ô∏è Quantum-resistant security active"
          else
            echo "‚ùå Deployment failed - check logs"
            exit 1
          fi

# Security scanning job
  security-scan:
    name: Advanced Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

# Privacy verification job
  privacy-verification:
    name: Privacy Architecture Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify no data retention
        run: |
          echo "Checking for data retention violations..."
          ! find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" | xargs grep -l "localStorage\|sessionStorage\|indexedDB\|webSQL" || exit 1
          echo "No client-side data retention found"

      - name: Verify differential privacy implementation
        run: |
          echo "Checking differential privacy implementation..."
          grep -r "epsilon.*0\.05" src/ || exit 1
          echo "Differential privacy Œµ=0.05 verified"

      - name: Verify quantum-resistant encryption
        run: |
          echo "Checking quantum-resistant encryption..."
          grep -r "CRYSTALS-Kyber\|kyber-crystals" src/ package.json || exit 1
          echo "Quantum-resistant encryption verified"