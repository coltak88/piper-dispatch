# Piper Dispatch Newsletter - Default Server Configuration
# Privacy-first, quantum-secured web server configuration
# Features: CSP, HSTS, quantum-safe headers, GDPR compliance

# Upstream for health checks
upstream health_check {
    server 127.0.0.1:8080;
    keepalive 32;
}

# Rate limiting
limit_req_status 429;
limit_conn_status 429;

# Main server block
server {
    listen 8080 default_server;
    listen [::]:8080 default_server;
    
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    include /etc/nginx/conf.d/security-headers.conf;
    
    # Rate limiting
    limit_req zone=general burst=50 nodelay;
    limit_conn conn_limit_per_ip 20;
    
    # Remove server signature
    server_tokens off;
    
    # Prevent access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Prevent access to backup files
    location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 '{"status":"healthy","service":"piper-dispatch","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Metrics endpoint (internal only)
    location /metrics {
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        access_log off;
        return 200 'piper_dispatch_up 1\npiper_dispatch_requests_total $request_id\n';
        add_header Content-Type text/plain;
    }
    
    # Privacy policy endpoint
    location /privacy {
        try_files /privacy.html /index.html;
        
        # Enhanced privacy headers
        add_header X-Privacy-Policy "GDPR-Plus Compliant" always;
        add_header X-Data-Retention "15-seconds" always;
        add_header X-Quantum-Security "CRYSTALS-Kyber" always;
    }
    
    # API endpoints with enhanced rate limiting
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Proxy to backend (if needed)
        # proxy_pass http://backend;
        return 404;
    }
    
    # Authentication endpoints with strict rate limiting
    location /auth/ {
        limit_req zone=login burst=5 nodelay;
        
        # Additional security for auth
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        return 404;
    }
    
    # Static assets with long-term caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Security headers for assets
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        # Gzip pre-compressed files
        gzip_static on;
        
        # Try files with fallback
        try_files $uri $uri/ =404;
    }
    
    # Service Worker with no-cache
    location /sw.js {
        expires epoch;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        
        try_files $uri =404;
    }
    
    # Manifest files
    location /manifest.json {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "application/manifest+json";
        
        try_files $uri =404;
    }
    
    # Robots.txt
    location /robots.txt {
        expires 1d;
        add_header Cache-Control "public";
        
        try_files $uri =404;
    }
    
    # Sitemap
    location /sitemap.xml {
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "application/xml";
        
        try_files $uri =404;
    }
    
    # Main application - SPA routing
    location / {
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # Privacy headers
        add_header X-Privacy-Mode "GDPR-Plus" always;
        add_header X-Data-Processing "On-Device" always;
        add_header X-Quantum-Encryption "CRYSTALS-Kyber" always;
        
        # Neurodiversity support
        add_header X-Accessibility "WCAG-2.1-AA" always;
        add_header X-Neurodiversity "Optimized" always;
        
        # Cache control for HTML
        expires epoch;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        
        # Try files with SPA fallback
        try_files $uri $uri/ /index.html;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        add_header Cache-Control "no-cache";
    }
    
    location = /50x.html {
        internal;
        add_header Cache-Control "no-cache";
    }
    
    # Security: Block common attack patterns
    location ~* /(wp-admin|wp-login|admin|phpmyadmin|mysql|sql) {
        deny all;
        access_log off;
        return 444;
    }
    
    # Block user agents
    if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
        return 403;
    }
    
    # Block suspicious requests
    if ($request_uri ~* "(\<|%3C).*script.*(\>|%3E)") {
        return 403;
    }
    
    if ($query_string ~* "[;'<>]") {
        return 403;
    }
    
    # Logging
    access_log /var/log/nginx/piper-dispatch.access.log main;
    error_log /var/log/nginx/piper-dispatch.error.log warn;
}

# Redirect HTTP to HTTPS (when behind load balancer)
server {
    listen 8080;
    server_name ~^(?!localhost).*;
    
    # Check if request came through HTTPS
    if ($http_x_forwarded_proto != "https") {
        return 301 https://$host$request_uri;
    }
    
    # If already HTTPS, process normally
    return 404;
}