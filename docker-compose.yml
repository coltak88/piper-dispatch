# Piper Dispatch Newsletter - Docker Compose Configuration
# Complete deployment stack with monitoring, security, and privacy features
# Features: React app, Redis cache, monitoring, logging, security scanning

version: '3.8'

services:
  # Main Piper Dispatch Application
  piper-dispatch:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
        - REACT_APP_VERSION=${VERSION:-1.0.0}
        - REACT_APP_BUILD_DATE=${BUILD_DATE:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
    container_name: piper-dispatch-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - REACT_APP_QUANTUM_SECURITY=enabled
      - REACT_APP_PRIVACY_MODE=gdpr-plus
      - REACT_APP_NEURODIVERSITY_SUPPORT=enabled
      - REACT_APP_MONITORING_ENABLED=true
    volumes:
      - ./logs:/var/log/nginx:rw
    networks:
      - piper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.piper-dispatch.rule=Host(`localhost`)"
      - "traefik.http.services.piper-dispatch.loadbalancer.server.port=8080"
      - "com.piper-dispatch.service=main-app"
      - "com.piper-dispatch.version=${VERSION:-1.0.0}"
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/cache/nginx:noexec,nosuid,size=50m
      - /var/run:noexec,nosuid,size=10m
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started

  # Redis Cache for Performance
  redis:
    image: redis:7-alpine
    container_name: piper-dispatch-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-piper-secure-redis-2024}
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-piper-secure-redis-2024}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis-data:/data:rw
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - piper-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=10m

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: piper-dispatch-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus:rw
    networks:
      - piper-network
    security_opt:
      - no-new-privileges:true
    user: "65534:65534"

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: piper-dispatch-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-piper-secure-grafana-2024}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_SECURITY_COOKIE_SAMESITE=strict
    volumes:
      - grafana-data:/var/lib/grafana:rw
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - piper-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    user: "472:472"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: piper-dispatch-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - piper-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=10m

  # Cadvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: piper-dispatch-cadvisor
    restart: unless-stopped
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - piper-network
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=10m

  # Loki for Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: piper-dispatch-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki:rw
    networks:
      - piper-network
    security_opt:
      - no-new-privileges:true
    user: "10001:10001"

  # Promtail for Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: piper-dispatch-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/var/log:ro
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - piper-network
    depends_on:
      - loki
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=10m

  # Security Scanner (Trivy)
  security-scanner:
    image: aquasec/trivy:latest
    container_name: piper-dispatch-security
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security-reports:/reports:rw
    command: >
      sh -c '
        trivy image --format json --output /reports/piper-dispatch-scan.json piper-dispatch:latest &&
        trivy fs --format json --output /reports/filesystem-scan.json /
      '
    networks:
      - piper-network
    profiles:
      - security

  # Backup Service
  backup:
    image: alpine:latest
    container_name: piper-dispatch-backup
    restart: "no"
    volumes:
      - redis-data:/backup/redis:ro
      - grafana-data:/backup/grafana:ro
      - prometheus-data:/backup/prometheus:ro
      - ./backups:/backups:rw
    command: >
      sh -c '
        apk add --no-cache tar gzip &&
        cd /backup &&
        tar -czf /backups/piper-dispatch-backup-$(date +%Y%m%d-%H%M%S).tar.gz . &&
        find /backups -name "*.tar.gz" -mtime +7 -delete
      '
    networks:
      - piper-network
    profiles:
      - backup
    security_opt:
      - no-new-privileges:true

# Networks
networks:
  piper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: piper-br0
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: 1500

# Volumes
volumes:
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/loki

# Secrets (for production use)
secrets:
  redis_password:
    file: ./secrets/redis_password.txt
  grafana_password:
    file: ./secrets/grafana_password.txt
  jwt_secret:
    file: ./secrets/jwt_secret.txt

# Configuration for different environments
x-common-variables: &common-variables
  TZ: UTC
  PUID: 1000
  PGID: 1000

# Health check configuration
x-healthcheck: &default-healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s

# Logging configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,version"

# Resource limits
x-resources: &default-resources
  limits:
    memory: 512M
    cpus: '0.5'
  reservations:
    memory: 256M
    cpus: '0.25'